#!/bin/bash
# author: Jan Hybs
# This script will alter specific docker images by adding curent user in them

# get absolute dir in which is this script stored
CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DOCKERFILES=$CWD/../dockerfiles

# default config
YES_TO_ALL=0
SKIP_BUILD=0
DO_NOT_OVERRIDE=0
GROUP_ID=`id -g`
USER_ID=`id -u`
USER_NAME=`whoami`
IMAGES="flow123d/flow-libs-dev-dbg flow123d/flow-libs-dev-rel flow123d/install"

while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -n|--user-name)
    USER_NAME="$2"
    shift
    ;;
    -u|--uid)
    USER_ID="$2"
    shift
    ;;
    -g|--gid)
    GROUP_ID="$2"
    shift
    ;;
    -i|--images)
    IMAGES="$2"
    shift
    ;;
    -d|--do-not-override)
    DO_NOT_OVERRIDE=1
    ;;
    -y|--yes-to-all)
    YES_TO_ALL=1
    ;;
    -s|--skip-build)
    SKIP_BUILD=1
    ;;
    *)
        # unknown option
    ;;
esac
shift
done

function build_images {
    cd $DOCKERFILES
    echo "Building images..."
    echo "============================================"
    docker build --tag flow123d/base               base
    docker build --tag flow123d/base-build         base-build
    docker build --tag flow123d/flow-libs-dev-dbg  flow-libs-dev-dbg
    docker build --tag flow123d/flow-libs-dev-rel  flow-libs-dev-rel
    docker build --tag flow123d/install            install
    echo "============================================"
    echo "Images built"
    echo ""
}

function create_setup_script {
    cp "$CWD/templates/setup.template.sh" "$CWD/templates/setup.sh"
    # going through script several times since some argument may be on the same line
    for V in 1 2 3
    do
        sed -e "s/@GROUP_ID@/$GROUP_ID/" \
            -e "s/@USER_ID@/$USER_ID/" \
            -e "s/@USER_NAME@/$USER_NAME/" \
            "$CWD/templates/setup.sh" > "$CWD/templates/setup_tmp.sh"
        mv "$CWD/templates/setup_tmp.sh" "$CWD/templates/setup.sh"
    done
    chmod +x "$CWD/templates/setup.sh"
}

function alter_image {
    echo "--------------------------------------------"
    echo "Altering image $1"
    echo "--------------------------------------------"
    TEMP_NAME="install-image"
    docker run --privileged -di --name $TEMP_NAME $1 bash
    docker cp   "templates/setup.sh" $TEMP_NAME:/tmp/setup.sh
    docker exec $TEMP_NAME //tmp/setup.sh # double slash for mingw to not convert path to windows
    # create new image and stop container
    docker commit $TEMP_NAME $1:user
    docker stop $TEMP_NAME
    docker rm   -f $TEMP_NAME
    echo "--------------------------------------------"
    echo "Image created. To use this image use full image name: $1:user"
    echo "To be automatically user $USER_NAME, use one of the following syntax:"
    echo "    docker run -ti --rm -u \$(id -u):\$(id -g) $1:user"
    echo "    docker run -ti --rm -u $(id -u):$(id -g) $1:user"
    echo ""
}


# build images
# ------------------------------------------------------------------------------
if [[ $SKIP_BUILD -eq 0 ]]; then
    build_images
fi


# create setup script
# ------------------------------------------------------------------------------
create_setup_script


# install custom images 
# ------------------------------------------------------------------------------
if [[ $DO_NOT_OVERRIDE -eq 1 ]]; then
    echo 'check for images'
    for IMAGE in $IMAGES
    do
        RESULT=$(docker images $IMAGE:user -q)
        if [[ -z $RESULT ]]; then
            echo "Missing image $IMAGE:user"
            alter_image $IMAGE
        else
            echo "Image $IMAGE:user exists, skipping..."
        fi
    done
    echo $DBG $REL
else
    for IMAGE in $IMAGES
    do
        alter_image $IMAGE
    done
fi


# detect exited containers
# ------------------------------------------------------------------------------
EXITED=$(docker ps -q -f status=exited)
if [[ -n $EXITED ]]; then
    echo "--------------------------------------------"
    echo "Note: You have exited containers present. Exited containers are usually"
    echo "      left overs which can be safely removed."
    echo "Containers are: "
    docker images | grep "^<none>"
    
    if [[ $YES_TO_ALL -eq 1 ]]; then
        docker rm $EXITED
    else
        read -p "Would you like to remove them? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            docker rm $EXITED
        fi
    fi
    echo "--------------------------------------------"
fi

# detect untagged images
# ------------------------------------------------------------------------------
UNNAMED=$(docker images | grep "^<none>" | awk "{print \$3}")
if [[ -n $UNNAMED ]]; then
    echo "--------------------------------------------"
    echo "Note: You have untagged images present, this probably occured when images"
    echo "      were reinstalled. Even though these images can still be used it is "
    echo "      recommended to simply delete them."
    echo "Images are: "
    docker images | grep "^<none>"
    
    if [[ $YES_TO_ALL -eq 1 ]]; then
        docker rmi $UNNAMED
    else
        read -p "Would you like to remove them? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            docker rmi $UNNAMED
        fi
    fi
    echo "--------------------------------------------"
fi


docker images